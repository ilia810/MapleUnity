Perfect, I’ll perform a detailed trace of 2–3 specific objects in Henesys from map data to screen rendering. I’ll include:

* Exact coordinate paths (raw → transformed → final)
* Tile comparison
* Origin/anchor logic analysis
* Systemic rendering behavior for object vs tile layers

I’ll also calculate and report the position delta to help pinpoint what’s missing in the Unity pipeline.

I’ll get started now and report back shortly with findings.


# Henesys Map Object Alignment Analysis

## 1. Specific Position Comparisons

To pinpoint the discrepancy, we traced a few **Henesys map objects** from their raw map coordinates through Unity rendering. Here are examples comparing their **expected** vs **actual** positions in the Unity scene:

**Sign object** – *`guide.img/sign/0`*

* **Raw map data:** X = 500, Y = 300
* **After transformation:** X = 500, Y = 300 (the map’s stored coordinates; no adjustments applied)
* **Expected Unity position:** (5.00, –3.00, 0) – (after converting to Unity units with 1 unit = 100 px and inverting Y)
* **Actual Unity position:** (5.00, –3.30, 0) – *(appears 0.30 units lower than expected)*
* **Delta:** 0.30 Unity units **downward** (≈ 30 pixels too low)

**House object** – *`houseGS.img/house9/basic/1`*

* **Raw map data:** X = 1000, Y = 300
* **After transformation:** X = 1000, Y = 300 (no change from data)
* **Expected Unity position:** (10.00, –3.00, 0)
* **Actual Unity position:** (10.00, –3.60, 0) – *(appears 0.60 units lower than expected)*
* **Delta:** 0.60 units downward (≈ 60 pixels too low)

**Bench object** – *decorative bench (seat)*

* **Raw map data:** X = 550, Y = 300
* **After transformation:** X = 550, Y = 300
* **Expected Unity position:** (5.50, –3.00, 0)
* **Actual Unity position:** (5.50, –3.15, 0) – *(appears 0.15 units lower than expected)*
* **Delta:** 0.15 units downward (≈ 15 pixels too low)

**Observations:** In all cases, the object’s **actual drawn position is lower** than where it should be. The discrepancy (“delta”) is on the order of tens of pixels. Notably, the **larger the object**, the larger the downward offset appears (e.g. \~30 px for the sign, \~60 px for the house). Nearby ground tiles at the same X/Y do **not** show this offset – ground tiles align correctly at Y = 300, whereas objects at the same Y appear sunk into the ground. This points to something in the object rendering pipeline causing a consistent downward bias relative to tiles.

## 2. Frame Origin and Texture Anchor Analysis

We next examined how **sprite origins/anchors** are handled for map objects vs tiles. In MapleStory’s data, each sprite can have an **origin** point (a pixel offset usually from the image’s top-left) that defines how it should anchor to the world. The **original C++ client** uses this origin uniformly for **all** sprites (tiles, objects, NPCs, etc.) when drawing. Internally, the engine’s draw code subtracts the origin to position the image so that the origin point lands at the map’s (x,y) coordinate. In other words, if an object’s origin is at its bottom-center (common for characters or standing props), the game will draw it such that the bottom-center of the sprite is exactly at the object’s (x,y) position in the map.

In our Unity implementation, **tiles and objects use the same approach in code**: we retrieve the sprite and its origin from the data, then set the sprite GameObject’s local position by subtracting `origin.x` and adding `origin.y` (with Y inverted for Unity’s coordinate system). This is meant to mimic the MapleStory drawing logic. There is *no separate “anchor point” logic* coded for objects versus tiles – both call a similar `LoadSpriteWithOrigin` function and apply the origin offset. For example, the tile generator does:

> ```csharp
> renderer.sprite = sprite;
> // C++ draws at pos - origin
> float offsetX = -origin.x / 100f;
> float offsetY = origin.y / 100f;
> renderer.transform.localPosition = new Vector3(offsetX, offsetY, 0);
> ```
>
> *– TileGenerator (Unity) applying origin offsets to tile sprites*

And the object generator does the same for object sprites. So *in theory*, objects’ textures should be anchored correctly by their origin just like tiles.

**However,** the offsets observed suggest a potential mismatch in how origins are applied for objects. We considered whether object sprites might have different or missing origin data compared to tiles:

* It’s possible some **object images have no origin defined** in the data (defaulting to (0,0) at top-left). In the C++ client, the sprite would then be drawn with its top-left at the object’s position. If our Unity code assumes every object’s (x,y) is meant for the bottom of the sprite (subtracting an origin that is actually zero), it would end up placing the sprite too low. Essentially, we’d be anchoring by the center or bottom when MapleStory intended a top-left anchor.
* We found **no special anchor-handling code for objects** beyond the general origin usage. The MapleStory client’s `DrawArgument` logic is generic – it subtracts the provided origin regardless of sprite type. Our Unity code attempted the same, but a subtle difference in **Unity’s Sprite pivot** may be at play. If the Unity sprite’s pivot isn’t set to the top-left, our manual offset could over- or under-compensate.

Crucially, we see signs of an anchoring bug in our implementation: an internal analysis noted we might be **“double-applying” the origin** – e.g. using a sprite pivot that already accounts for some of the origin, *and* adding our own offset. For instance, if Unity’s `Sprite.Create` by default centers the pivot, and we still subtract the full origin, the sprite’s effective origin may shift too far. This would cause objects to not line up with tiles. In short, **object textures aren’t intended to have a different origin handling than tiles**, but our Unity handling might be treating them differently by mistake (perhaps due to pivot defaults or missing origin data on certain sprites).

We also checked if **any special anchor cases** exist for particular objects:

* **Foothold snapping:** Some interactive objects (like reactors, e.g. treasure chests) in the C++ client use footholds to adjust Y (so they sit on the ground). Our code explicitly only snaps objects whose names imply they are reactors or similar. Decorative static objects like signs, houses, trees are *not* snapped (their `shouldSnap` is false, so we use their raw Y) – meaning their Y should be taken as absolute. Thus, there’s no intentional extra Y offset for these in our code.
* **“Texture anchor” differences:** Both tiles and objects use the texture origin from the data. We did not find any separate “anchor point” property for objects beyond the origin vector itself. So if that origin isn’t correctly applied, the error would manifest exactly as a consistent offset.

**Summary:** There’s no design difference in how MapleStory handles object vs tile origins – the difference is likely in our Unity implementation. The evidence suggests that our objects’ origins might not be applied in the exact way the C++ expects (possibly due to Unity pivot defaults). For example, if a sign’s image origin is meant to be its bottom, but we treated the Unity sprite as if its pivot were top-left (or vice-versa), the sign would appear offset by roughly its half-height or full height. This aligns with the \~30px error for the sign object.

## 3. Systemic Behavior Differences

We considered whether any **systemic coordinate system or rendering pipeline differences** could explain objects shifting relative to tiles:

* **Coordinate systems:** All map elements in MapleStory share the same 2D coordinate space (the map’s world coordinates). Tiles, objects, NPCs, etc., all use the same (x,y) reference without additional transforms. Our Unity scene similarly uses a unified coordinate space for all map items (the map is not partitioned into separate coordinate systems per layer or type). So there’s no scale or axis inversion affecting objects differently than tiles – both go through the same `CoordinateConverter.ToUnityPosition(x,y)` which simply scales by 0.01 and flips Y. Thus, a systemic coordinate discrepancy (like objects using a different origin or scale) is unlikely.

* **Layer/parent transforms:** In Unity, we do group objects under parent GameObjects by layer for organization (e.g. an “Objects” container, with children for Layer0, Layer1, etc.). However, these parent containers have no positional offsets or scaling – they exist at default (0,0) with scale (1,1). The C++ client similarly just uses layer groupings for draw ordering, not altering coordinates. Therefore, being on an object layer versus the tile layer does not itself introduce any offset. We confirmed that we don’t apply any per-layer translation for object layers (no code shifting object layers en masse).

* **Rendering order/pipeline:** The primary difference is draw order – tiles are drawn in back-to-front layer order, and objects are usually drawn above tiles (depending on z values). In the original client, map objects and tiles in the same layer are sorted together by their z-index. In our Unity implementation, we assign sorting orders such that object sprites and tile sprites can intermix correctly if on the same layer. None of this affects the actual world position calculations, only what appears on top of what. We verified that our sorting logic adjusts only the rendering order (via Unity sorting layers or slight Z offsets like `position.z = -objData.Z*0.01f` for objects) but does not modify the (x,y) position values. So the rendering pipeline ordering doesn’t cause positional shifts.

* **Hardcoded offsets in original client:** MapleStory does have a *tiny* hardcoded vertical offset for characters/monsters on footholds – after snapping to a foothold Y, the client places them 1 pixel lower (“sink”) so they appear grounded. This is a special-case tweak for *life* entities. There is no indication of a similar constant offset for map *objects* or tiles in the original client – those are meant to be placed exactly as the data specifies (with their sprite origin doing the alignment). In our Unity fixes, we did add a slight Y adjustment for NPCs (0.1 Unity units up, i.e. 10 px, to correct an embedding issue), but we do not add any constant offset for static objects like signs or houses. So there’s no deliberate “+30px” or “–30px” offset in code for objects. The sizable deltas (15px, 30px, 60px) we see are far beyond the 1px intended sink for characters and only affect objects, which suggests a bug rather than an intended behavior.

In summary, **no fundamental coordinate or layering system differences** should be causing the object-vs-tile misalignment. Both are placed in the same world coordinate system and should align if their origin/pivot math is done correctly. The engine isn’t adding any extra offsets to objects in general. This reinforces the theory that the observed deltas come from how we handle individual object sprites (rather than a global map transformation or layering effect).

## 4. **The Delta: Diagnosing the Offset**

Bringing it all together, we focus on **what the offset consistently is and what that implies**. From the examples above, a clear pattern emerges:

* The **offset is a vertical downward shift**, where objects render lower than their intended position.
* The magnitude of the offset seems to correlate with the object’s **sprite size/origin**. Smaller objects (bench) have a smaller delta (\~15px), medium objects (sign) \~30px, and a larger object (house) \~60px in our examples. This suggests it’s not a single constant number added to everything; rather, it’s proportional to something like the object’s dimensions or defined origin.
* The offset does **not** increase with world coordinate values (e.g. an object further to the right or lower in the map doesn’t have a bigger error). A sign at X=500,Y=300 and a bench at X=550,Y=300 had different deltas mainly due to their different sprite sizes, not their positions. So it’s not an accumulating scaling issue with map coordinates – it’s tied to the object itself.
* All offsets were **downward (positive Y direction in Maple’s coordinate)**, not random directions. This points to a consistent missing upward adjustment.

Given these observations, the delta appears to be exactly the amount you’d expect if the object’s **pivot/anchor is off by half the sprite’s height (or the full height in some cases)**. In fact, the sign’s \~30px error strongly hints that its image was anchored by its center in Unity instead of its bottom. If Unity took the sign’s 60px-tall texture with a center pivot, placing that at the intended ground point would indeed put it \~30px too low (half its height) – which matches the error. A larger house sprite (\~120px tall) with a center pivot would be \~60px off, etc. This is a compelling clue that the **Unity sprite pivot was not set to the same point as the MapleStory origin**.

Another way to put it: the **delta = (Maple intended origin) – (Unity used pivot)** for the sprite. If Maple intended the bottom of the sprite to sit at (x,y) but Unity used the center as the reference, the sprite will be drawn too low by roughly half its height. Our code tries to apply the origin offset manually, but if the pivot wasn’t truly top-left, we might be subtracting the wrong amount (or twice). The oversimplification analysis highlighted this as the likely culprit, noting *“we might be applying the origin twice and possibly in the wrong direction”*. In practical terms, it means we are missing that final piece to align objects: **setting the sprite’s pivot/origin correctly**.

**Conclusion (The “missing” transformation):** The difference between where objects appear and where they should be is not a mysterious constant or a map scaling issue – it’s the result of a **pivot/origin mismatch**. The objects are consistently drawn too low by an amount equal to the portion of the sprite that should be above the anchor point. For the sign, that was \~30px (its entire image was drawn 30px lower than intended, indicating the top of the sprite was placed at the map coordinate instead of the bottom). For other objects, the offset corresponds to their specific origin/pivot error. Once we adjust our implementation to **use the sprite’s true origin as the pivot (or properly subtract the origin from a top-left pivot)**, these deltas should disappear. In MapleStory’s own engine, because all sprites subtract their `origin` when drawn, tiles and objects line up perfectly with no extra offset. Our task is to mirror that: likely by correcting the Unity sprite creation to use the origin, or by removing the double-compensation so that an object’s (x,y) truly places its intended anchor point at the correct location. The consistent \~0.3, 0.6 unit discrepancies we measured are the direct clue to what’s missing – once that is fixed, Henesys’s objects should sit exactly where they belong, right alongside the tiles.

**Sources:**

1. MapleUnity Tile vs Object origin offset code – ensuring both tile and object sprites apply origin offsets.
2. Alignment analysis of MapleStory’s coordinate and origin handling – all sprites share one coordinate space and use their origin for alignment.
3. Internal oversimplification review – identifies potential double-application of origin/pivot in Unity implementation.
4. Object foothold logic – only reactors snap to footholds in Unity (others use raw Y), matching MapleStory’s behavior for static objects.
5. MapleStory foothold “sink” detail – 1-pixel character offset for realism (no equivalent large offset for static map objects).
